git config --global user.email "vgyashwanthkumar@gmail.com" :- used to tell the git by 
which mail id the git is accessing

git config --global user.name "yashwanthvg": use to tell the git by which user name the git is going to accessing.

git config --global --get user.email
git config --global --get user.name

the above 6,7 commands returns the user mail-id and name.

git config --global --unset user.name
git config --global --unset user.email

the above 11,12 commands will unset the user id and email

git config --list : returns the user mail id, name.

git clone "remote repo link (github/bit bucket)" : used for copy pasting the repo form remote ----> to the device.

git init : used to create the local repo in the folder

git status : return the status of the files with respect to git

ls -a : is used to check whether the git folder is created or not because it is a hidden folder

git add file_name or . (i.e all files) : used to move the files to the git_staging area.

git commit -m "mention the changes here (must)" : it will store the file in the local repo i.e in our device folder.

git rm --cached file_name : used to remove the file from local repo to normal file, in order to sucessfully complete the removing processing we have to commit the change.
i.e git commit -m "someting here", and for adding back to repo we have to do add, and commit to that file.

workflow:

git init------> git add file_name --------> git commit -m "something" (for moving files to local repo )

git rm --cached file_name-------> git commit -m "something" (for removing the file from local repo)

Note: after modeifying any file we have to do add, commit for moving that file into local repo.

for creating the new remote repo in github or bit bucket we have to follow the step:

git init --> creating a connectivity between remote repo and local repo with the help github remote repo link --> push the local repo to remote repo.

for creating the link:

git remote add origin link(github/bitbucket link) : this helps to  create the link between the remote repo and local repo.
here the name of the repo which is going to store on remote repo is origin which can be anything (user specific).

git remote -v: helps to verify the link is created sucessfully or not.

git branch : return the branch name of the repo we currently working on.

git branch -M new_branch_name : used to change the current working branch name to some other name.
master == main branch in github
git push -u repo_name(i.e origin in our case) branch_name(on which branch we need to push): used to push the local repo
 to the corrsponding branch of remote repo.
Note : the use of -u ...



git checkout brach_name_need_to_shift : this helps to move from current working branch to new_branch.

git checkout -b brach_name: creating new branch called branch_name and jumping into it.

what is branch ? : it is just the duplication of the main repo (i.e master repo), the changes in one branch do not effect the 
other branch until we merge the branches.

git checkout -d branch_name : used to delete the branch by standing on other branch, we cannot delete the branch we currently
standing on (current working), we have to jump to other branch in order the delete the branch.

git diff branch_name : check the difference between the current working branch and the brach_name.

git pull repo_name(in our case origin ) branch_name_from_which_we_need_to_pull : used to pull the content form the remote repo
of specific branch to the current working branch and update the content of local repo, to match with the content of the remote repo

git merge branch_name :  merge the branch_name content to current_working branch (current_working_brach<-------branch_name)

Note: merge conflicts will arise when we have changes in the same line in any file, then we have to take care manually
regarding that or branch_name content over writes the other content.

git log : returns the history of commits what we have done before.

Undo the content in the files:
for un_commited files i.e the files are in staging area.
git checkout --file_name or .
for commited files.
git revert commit_hash_number : will undo the content the corrsponding commit of the file and the commit the file automatically.
git revert -n commit_hash_number : same like above, but file need to commit manually.
git reset --hard commit_hash_number : will undo the content along with this the commit history.
after doing hard reset the code in your local repo is differnt compare to remote repo so it will allow the push for saftey purpose to avoid overwritting the code on the remote repo
so we have to pull the content from remote repo then see the changes and updates things and then push back .
but we can do force push using "git push --force origin main" (Not recommended).

Undo changes: Need more clarity.


for files present in the staging area:  back to normal files stage.
git reset filename.
git reset // for all files.

for undoing the commit: back to normal files stage.

git reset HEAD~1 for (for undoing one commit change).

git reset commit_hash_number (for undoing multiple stages).

git reset --hard commit_hash_number (for saving the file content).

fork ---> for copying the repo of one account to the repo to the other account.

git show HEAD : returns the latest commit what we did.

git difftool commit_hash_no_1 commit_hash_no_2 : opens the meld tool and shows the difference between two commits

.gitignore file is used to store the files which are not going to add into the repo.
we have to make .gitignore file explicitly.

Tag in git : it help us to comment about the state of the code like any important changes or stable versions.
git tag v1.0 : the name of the tag of the particular branch is v1.0
git tag -a v1.0 -m "someting regarding the tag" // helps to create annote tags
git tag : return the information regarding the tag.
git push origin tag_name : will push the tag to the remote repo.
git tag -d tag_name : delete the tag.
git push origin -d tag_name : will remove the tag from the remote repo.
creating the tag for the past commit: 
git tag tag_name commit_number : will assign the tag_name to that commit_number.

commands enter in terminal before push operation because authenticstion failed: 
# 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 -- github token.

git remote set-url origin https: //token_key@github.com/<username>/<repo_name> -- command need to enter before push.

git remote set-url origin https: //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@github.com/vgyashwanth/<repo_name>(based on the repo name).

Note: when we push the repo with untracked files then those will not enter into the remote repo.





















 






